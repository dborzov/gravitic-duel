---
description: 
globs: 
alwaysApply: true
---
* Prioritize clear, simple code. 
* Avoid over-abstraction/layers of indirection. Some code repetition & hardcoded values (`CONSTANTS`) are ok; don't over-optimize for DRY.
* Use Python type hints (`typing`) for args, returns, and vars.
* Avoid mutable global variables. Pass state explicitly or use class instances. All game constants (`ALL_CAPS`) should be defined in `constants.py` and imported for use, along with the appropriate comment.
* Avoid using generic untyped `dict` for internal data structures.
* Liberally use `collections.namedtuple`, `typing.NamedTuple`, `collections.deque`, `heapq` when appropriate.
* No inheritance, minimize OOP use. When necessary, use composition with components patterns.

